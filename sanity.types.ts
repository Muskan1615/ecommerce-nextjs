/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Logo = {
  _id: string;
  _type: "logo";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  variant?: "light" | "dark" | "mobile" | "favicon" | "footer";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  isDefault?: boolean;
};

export type HeroSection = {
  _id: string;
  _type: "heroSection";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  slides?: Array<{
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    link?: string;
    altText?: string;
    _type: "slide";
    _key: string;
  }>;
};

export type PromotionCampaign = {
  _id: string;
  _type: "promotionCampaign";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  code?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "promotionCode";
  };
};

export type PromotionCode = {
  _id: string;
  _type: "promotionCode";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  code?: string;
  discoutPercentage?: number;
  expirationDate?: string;
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  intro?: string;
  description?: string;
  price?: number;
  discount?: number;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "productCategory";
  }>;
  stock?: number;
  status?: "new" | "hot" | "sale";
  variant?: "tshirts" | "shirts" | "jackets" | "bottoms" | "hoodies" | "vests" | "caps";
  bestSeller?: boolean;
  sizes?: Array<"XS" | "S" | "M" | "L" | "XL" | "XXL">;
};

export type ProductCategory = {
  _id: string;
  _type: "productCategory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type SanityImage = {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type CloudinaryAssetContextCustom = {
  _type: "cloudinary.assetContextCustom";
  alt?: string;
  caption?: string;
};

export type CloudinaryAssetDerived = {
  _type: "cloudinary.assetDerived";
  raw_transformation?: string;
  url?: string;
  secure_url?: string;
};

export type CloudinaryAsset = {
  _type: "cloudinary.asset";
  public_id?: string;
  resource_type?: string;
  type?: string;
  format?: string;
  version?: number;
  url?: string;
  secure_url?: string;
  width?: number;
  height?: number;
  bytes?: number;
  duration?: number;
  tags?: Array<string>;
  created_at?: string;
  derived?: Array<{
    _key: string;
  } & CloudinaryAssetDerived>;
  access_mode?: string;
  context?: CloudinaryAssetContext;
};

export type CloudinaryAssetContext = {
  _type: "cloudinary.assetContext";
  custom?: CloudinaryAssetContextCustom;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Logo | HeroSection | PromotionCampaign | PromotionCode | Product | ProductCategory | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug | CloudinaryAssetContextCustom | CloudinaryAssetDerived | CloudinaryAsset | CloudinaryAssetContext;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries/getBestSellers.ts
// Variable: query
// Query: *[_type == "product" && bestSeller == true] | order(_createdAt desc)[0...8]{      _id,      name,      slug,      price,      discount,      intro,      description,      images    }
export type QueryResult = Array<{
  _id: string;
  name: string | null;
  slug: Slug | null;
  price: number | null;
  discount: number | null;
  intro: string | null;
  description: string | null;
  images: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }> | null;
}>;

// Source: ./sanity/lib/queries/getProductsByCategorySlug.ts
// Variable: categoryQuery
// Query: *[_type == "productCategory" && slug.current == $slug][0]{ _id, title, "slug": slug.current }
export type CategoryQueryResult = {
  _id: string;
  title: string | null;
  slug: string | null;
} | null;
// Variable: productsQuery
// Query: *[_type == "product" && references($categoryId)]{      _id,      name,      slug,      price,      discount,      intro,      description,      images,      bestSeller,      status    }
export type ProductsQueryResult = Array<{
  _id: string;
  name: string | null;
  slug: Slug | null;
  price: number | null;
  discount: number | null;
  intro: string | null;
  description: string | null;
  images: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }> | null;
  bestSeller: boolean | null;
  status: "hot" | "new" | "sale" | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n    *[_type == \"product\" && bestSeller == true] | order(_createdAt desc)[0...8]{\n      _id,\n      name,\n      slug,\n      price,\n      discount,\n      intro,\n      description,\n      images\n    }\n  ": QueryResult;
    "*[_type == \"productCategory\" && slug.current == $slug][0]{ _id, title, \"slug\": slug.current }": CategoryQueryResult;
    "\n    *[_type == \"product\" && references($categoryId)]{\n      _id,\n      name,\n      slug,\n      price,\n      discount,\n      intro,\n      description,\n      images,\n      bestSeller,\n      status\n    }\n  ": ProductsQueryResult;
  }
}
